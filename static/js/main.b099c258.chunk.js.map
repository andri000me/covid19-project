{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.jsx","App.js","index.js","App.module.css","components/Chart/Chart.module.css","components/CountryPicker/CountryPicker.module.css","images/covid.png"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","console","log","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","varian","url","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","image","src","covidimage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"4GACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,KAAO,oBAAoB,SAAW,wBAAwB,UAAY,yBAAyB,OAAS,wB,2NCqEpJC,EA5DD,SAAC,GAAyD,IAAD,IAAtDC,KAAOC,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,UAAWC,EAAyB,EAAzBA,OAAQC,EAAiB,EAAjBA,WAElD,OADAC,QAAQC,IAAK,CAACL,YAAWC,YAAWC,SAAQC,eACxCH,EAKA,yBAAKM,UAAWC,IAAOC,WACnB,kBAACC,EAAA,EAAD,CAAMD,WAAS,EAACE,QAAS,EAAGC,QAAQ,UAChC,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOY,WACzE,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,cACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAK1B,EAAU2B,MACfC,SAAU,IACVC,UAAU,OAGlB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAK3B,GAAY4B,gBACxD,kBAACV,EAAA,EAAD,CAAYW,OAAO,SAAnB,wCAGR,kBAACvB,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAON,YACzE,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,UACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKzB,EAAU0B,MACfC,SAAU,IACVC,UAAU,OAGlB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAK3B,GAAY4B,gBACxD,kBAACV,EAAA,EAAD,CAAYW,OAAO,SAAnB,wCAGR,kBAACvB,EAAA,EAAD,CAAMG,MAAI,EAACC,UAAWC,IAAMC,GAAI,GAAIC,GAAI,EAAGV,UAAWW,IAAGV,IAAOW,KAAMX,IAAOL,SACzE,kBAACkB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,MAAM,gBAAgBC,cAAY,GAA9C,aACA,kBAACF,EAAA,EAAD,CAAYG,QAAQ,MAChB,kBAAC,IAAD,CACIC,MAAO,EACPC,IAAKxB,EAAOyB,MACZC,SAAU,IACVC,UAAU,OAGlB,kBAACR,EAAA,EAAD,CAAYC,MAAM,iBAAiB,IAAIQ,KAAK3B,GAAY4B,gBACxD,kBAACV,EAAA,EAAD,CAAYW,OAAO,SAAnB,2CAhDT,e,yBCXTC,EAAM,iCAECC,EAAS,uCAAG,WAAOC,GAAP,2BAAAC,EAAA,6DACjBC,EAAgBJ,EAEjBE,IACCE,EAAa,UAAMJ,EAAN,sBAAuBE,IAJnB,kBAOkDG,IAAMC,IAAIF,GAP5D,2BAOVtC,KAAOC,EAPG,EAOHA,UAAWC,EAPR,EAOQA,UAAWC,EAPnB,EAOmBA,OAAQC,EAP3B,EAO2BA,WAP3B,kBAQV,CAACH,YAAWC,YAAWC,SAAQC,eARrB,kCAajBC,QAAQC,IAAR,MAbiB,0DAAH,sDAkBTmC,EAAc,uCAAG,gCAAAJ,EAAA,+EAEDE,IAAMC,IAAN,UAAaN,EAAb,WAFC,uBAEflC,EAFe,EAEfA,KAED0C,EAAe1C,EAAK2C,KAAI,SAACC,GAAD,MAAgB,CAC1C3C,UAAW2C,EAAU3C,UAAU4C,MAC/B1C,OAAQyC,EAAUzC,OAAO0C,MACzBC,KAAMF,EAAUG,eAPE,kBAUfL,GAVe,gCAYtBrC,QAAQC,IAAR,MAZsB,yDAAH,qDAgBd0C,EAAc,uCAAG,8BAAAX,EAAA,+EAEYE,IAAMC,IAAN,UAAaN,EAAb,eAFZ,uBAERe,EAFQ,EAEfjD,KAAOiD,UAFQ,kBAIfA,EAAUN,KAAI,SAACP,GAAD,OAAaA,EAAQc,SAJpB,yFAAH,qD,yBCqCZC,EApED,SAAC,GAAqD,IAAD,IAAnDnD,KAAOC,EAA4C,EAA5CA,UAAWC,EAAiC,EAAjCA,UAAWC,EAAsB,EAAtBA,OAASiC,EAAa,EAAbA,QAAa,EAC9BgB,mBAAS,IADqB,mBACxDR,EADwD,KAC7CS,EAD6C,KAG/DC,qBAAU,YACQ,uCAAG,sBAAAjB,EAAA,kEACbgB,EADa,SACMZ,IADN,6EAAH,qDAOdc,KACD,IAEH,IAAMC,EACFZ,EAAUa,OAEN,kBAAC,IAAD,CACIzD,KAAO,CACH0D,OAAQd,EAAUD,KAAI,qBAAGG,QACzBa,SAAU,CAAC,CACP3D,KAAM4C,EAAUD,KAAI,qBAAE1C,aACtB2D,MAAO,WACPC,YAAa,UACbC,MAAM,GAEP,CACC9D,KAAM4C,EAAUD,KAAI,qBAAExC,UACtByD,MAAO,SACPC,YAAa,MACbE,gBAAiB,uBACjBD,MAAM,OAKlB,KAIFE,EACF/D,EAEI,kBAAC,IAAD,CACAD,KAAM,CACF0D,OAAQ,CAAC,WAAY,YAAa,UAClCC,SAAU,CAAC,CACPC,MAAO,SACPG,gBAAgB,CAAC,uBAAwB,uBAAwB,wBACjE/D,KAAM,CAACC,EAAU2B,MAAO1B,EAAU0B,MAAMzB,EAAOyB,UAIvDqC,QAAS,CACLC,OAAQ,CAACC,SAAS,GAClBC,MAAQ,CAACD,SAAS,EAAOE,KAAK,oBAAD,OAAsBjC,OAGvD,KAER,OACI,yBAAK7B,UAAWC,IAAOC,WAClB2B,EAAU4B,EAAWR,I,mCCrCnBc,EA1BO,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EAEInB,mBAAS,IAFb,mBAErCoB,EAFqC,KAEnBC,EAFmB,KAgB7C,OAZAnB,qBAAU,YACQ,uCAAG,sBAAAjB,EAAA,kEACboC,EADa,SACazB,IADb,6EAAH,qDAIdO,KAED,CAACkB,IAMD,kBAACC,EAAA,EAAD,CAAanE,UAAWC,IAAOmE,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAOpD,SACxE,4BAAQA,MAAM,IAAd,UACV4C,EAAiB7B,KAAI,SAACP,EAAS6C,GAAV,OAAgB,4BAAQC,IAAKD,EAAGrD,MAAOQ,GAAUA,S,kCC+B5D+C,E,4MAxCXC,MAAQ,CACJpF,KAAK,GACLoC,QAAQ,I,EAWZmC,oB,uCAAsB,WAAOnC,GAAP,eAAAC,EAAA,sEACQF,EAAUC,GADlB,OACZiD,EADY,OAElB,EAAKC,SAAS,CAACtF,KAAMqF,EAAajD,QAASA,IAC3C/B,QAAQC,IAAI+E,GACfhF,QAAQC,IAAI8B,GAJS,2C,wPAPQD,I,OAApBkD,E,OAENE,KAAKD,SAAS,CAACtF,KAAMqF,I,qIAcf,IAAD,EACmBE,KAAKH,MAAtBpF,EADF,EACEA,KAAMoC,EADR,EACQA,QAGb,OAEI,yBAAK7B,UAAWC,IAAOC,WACnB,yBAAKF,UAAWC,IAAOgF,MAAOC,IAAKC,IAAYC,IAAI,aACnD,kBAAC,EAAD,CAAO3F,KAAMA,IACb,kBAAC,EAAD,CAAeuE,oBAAqBgB,KAAKhB,sBACzC,kBAAC,EAAD,CAAOvE,KAAMA,EAAMoC,QAASA,S,GAlC1BwD,IAAMC,WCVxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U,mBCJjDpG,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,qB,mBCA7DD,EAAOC,QAAU,CAAC,UAAY,2B,mBCA9BD,EAAOC,QAAU,CAAC,YAAc,qC,mBCDhCD,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.b099c258.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__30DUp\",\"card\":\"Cards_card__2qn3r\",\"infected\":\"Cards_infected__33pry\",\"recovered\":\"Cards_recovered__2jb6c\",\"deaths\":\"Cards_deaths__2TZTz\"};","import React from 'react';\r\n\r\nimport { Card, CardContent, Typography, Grid} from '@material-ui/core';\r\n\r\nimport styles from './Cards.module.css';\r\n\r\nimport CountUp from 'react-countup';\r\n\r\nimport cx from 'classnames';\r\n\r\nconst Cards = ({ data: {confirmed, recovered, deaths, lastUpdate}}) => {\r\n    console.log( {confirmed, recovered, deaths, lastUpdate});\r\n    if(!confirmed){\r\n        return 'Loading... ';\r\n    }\r\n    return (\r\n        // <h1>Cards</h1>\r\n        <div className={styles.container}>\r\n            <Grid container spacing={3} justify=\"center\"> \r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.infected)}> \r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Terinfeksi</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={confirmed.value } \r\n                                duration={2.5}\r\n                                separator=\",\"/>\r\n                            \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varian=\"body2\">Number of active cases of COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.recovered)}> \r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Sembuh</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={recovered.value } \r\n                                duration={2.5}\r\n                                separator=\",\"/>\r\n                            \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varian=\"body2\">Number of recoveries from COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n                <Grid item component={Card} xs={12} md={3} className={cx(styles.card, styles.deaths)}> \r\n                    <CardContent>\r\n                        <Typography color=\"textSecondary\" gutterBottom >Meninggal</Typography>\r\n                        <Typography variant=\"h5\">\r\n                            <CountUp\r\n                                start={0}\r\n                                end={deaths.value } \r\n                                duration={2.5}\r\n                                separator=\",\"/>\r\n                            \r\n                        </Typography>\r\n                        <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                        <Typography varian=\"body2\">Number of deaths caused by COVID-19</Typography>\r\n                    </CardContent>\r\n                </Grid>\r\n            </Grid>\r\n           \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Cards;\r\n","import axios from 'axios';\r\n\r\nconst url = 'https://covid19.mathdro.id/api';\r\n\r\nexport const fetchData = async (country) => {\r\n    let changeableUrl = url;\r\n\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`;\r\n    }\r\n    try{\r\n        const {data: {confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\r\n        return {confirmed, recovered, deaths, lastUpdate };\r\n        // const response = await axios.get(url);\r\n        // return response;\r\n        // console.log(response);\r\n    } catch(error){\r\n        console.log(error);\r\n\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async ()=> {\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        \r\n        const modifiedData = data.map((dailyData) => ({\r\n            confirmed: dailyData.confirmed.total, \r\n            deaths: dailyData.deaths.total,\r\n            date: dailyData.reportDate,\r\n        }));\r\n\r\n        return modifiedData;\r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchCountries = async () =>  {\r\n    try {\r\n        const {data: {countries}} = await axios.get(`${url}/countries`);\r\n\r\n        return countries.map((country) => country.name);\r\n\r\n    } catch (error){\r\n\r\n    }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line, Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\n\r\n\r\nconst Chart = ({data: {confirmed, recovered, deaths}, country}) => {\r\n    const [dailyData, setDailyData] =useState([]) ;\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () => {\r\n            setDailyData(await fetchDailyData());\r\n            \r\n\r\n            // console.log(dailyData);\r\n        }\r\n\r\n        fetchAPI();\r\n    }, []);\r\n\r\n    const lineChart = (\r\n        dailyData.length \r\n        ? (\r\n            <Line\r\n                data= {{\r\n                    labels: dailyData.map(( {date}) => date ),\r\n                    datasets: [{\r\n                        data: dailyData.map(({confirmed}) => confirmed ),\r\n                        label: 'Infected',\r\n                        borderColor: '#3333ff', \r\n                        fill: true,\r\n\r\n                    }, {\r\n                        data: dailyData.map(({deaths}) => deaths ),\r\n                        label: 'Deaths',\r\n                        borderColor: 'red', \r\n                        backgroundColor: 'rgba(255, 0, 0, 0.5)', \r\n                        fill: true,\r\n\r\n                    }], \r\n                }}\r\n            />\r\n        ) : null \r\n    );\r\n    // console.log(confirmed, recovered,deaths);\r\n    \r\n    const barChart = (\r\n        confirmed\r\n        ? (\r\n            <Bar\r\n            data={{\r\n                labels: ['Infected', 'Recovered', 'Deaths'],\r\n                datasets: [{\r\n                    label: 'People',\r\n                    backgroundColor:['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n                    data: [confirmed.value, recovered.value,deaths.value]\r\n                }]\r\n            }}\r\n\r\n            options={{\r\n                legend: {display: false}, \r\n                title : {display: true , text: `Current state in ${country}`},\r\n            }}\r\n            />\r\n        ) : null \r\n    )\r\n    return (\r\n        <div className={styles.container}>\r\n            {country ? barChart : lineChart}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Chart;\r\n","import React, {useState, useEffect} from 'react';\r\nimport {NativeSelect, FormControl} from '@material-ui/core';\r\n\r\nimport styles from './CountryPicker.module.css';\r\nimport { fetchCountries } from '../../api';\r\n\r\nconst CountryPicker = ({handleCountryChange}) => {\r\n\r\n    const  [fetchedCountries, setFetchedCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchAPI = async () =>  {\r\n            setFetchedCountries(await fetchCountries());\r\n        \r\n        }\r\n        fetchAPI();\r\n\r\n    }, [setFetchedCountries]);\r\n\r\n    //  console.log(fetchedCountries);\r\n\r\n\r\n    return (\r\n       <FormControl className={styles.formControl}>\r\n           <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>\r\n               <option value=\"\">Global</option>\r\n    {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n           </NativeSelect>\r\n       </FormControl>\r\n    )\r\n}\r\n\r\nexport default CountryPicker;\r\n","import React from 'react';\r\n\r\n// import Cards from './components/Cards/Cards';\r\n// import Chart from './components/Chart/Chart';\r\n// import CountryPicker from './components/CountryPicker/CountryPicker';\r\n\r\nimport {Cards, Chart, CountryPicker} from './components';\r\n\r\nimport styles from './App.module.css';\r\n\r\nimport {fetchData} from './api';\r\n\r\nimport covidimage from './images/covid.png'\r\n// import Axios from 'axios';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        data:{},\r\n        country:'',\r\n    }\r\n\r\n    async componentDidMount(){\r\n        const fetchedData = await fetchData();\r\n\r\n        this.setState({data: fetchedData});\r\n\r\n        // console.log(data);\r\n    }\r\n\r\n    handleCountryChange = async (country) => {\r\n        const fetchedData = await fetchData(country);\r\n        this.setState({data: fetchedData, country: country});\r\n        console.log(fetchedData);\r\n     console.log(country); \r\n        //fetch data\r\n        // set the state\r\n    }\r\n\r\n    render() {\r\n        const {data, country} = this.state;\r\n    \r\n\r\n        return (\r\n            // <div className=\"container\">\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={covidimage} alt=\"COVID-19\"></img>\r\n                <Cards data={data}/>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Chart data={data} country={country}/>\r\n\r\n                {/* <footer>&copy; Copyright 2020 HTML.am</footer> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__3gVU0\",\"image\":\"App_image__2qGDG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__zLuZ-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__3uTDy\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}